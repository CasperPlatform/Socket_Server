from twisted.internet import reactor
from twisted.internet.protocol import Factory, DatagramProtocol
from twisted.internet.endpoints import TCP4ClientEndpoint

class Greeter(DatagramProtocol):
    def startProtocol(self):
        self.transport.connect("localhost", 9998)
        self.sendDatagram()

    def sendDatagram(self):

        datagram = "Bajs"
        self.transport.write(datagram)

    def datagramReceived(self, datagram, host):
        print 'Datagram received: ', repr(datagram)
        self.sendDatagram()

class GreeterFactory(Factory):
    def buildProtocol(self, addr):
        return Greeter()

def gotProtocol(p):
    p.sendMessage("Hello")
    reactor.callLater(1, p.sendMessage, "This is sent in a second")
    reactor.callLater(2, p.transport.loseConnection)



t = reactor.listenUDP(9998, Greeter())
reactor.run()
